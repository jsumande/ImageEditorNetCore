@{
    
    // byte[] FileBytes = null;
    // if (ViewData["FILEDATASS"] != null)
    // {
    //     FileBytes = (byte[])ViewData["FILEDATASS"];
    // }

}
<style>
    button.active {
        background: limegreen;
        font-weight: bold
    }

</style>

<div class="controls">
    <button id="select" type="button" onclick="changeAction(this)">select</button>
    <button id="erase" type="button" onclick="changeAction(this)">erase</button>
    <button id="undo" type="button" onclick="changeAction(this)">undo erasing</button>
    <button id="draw" type="button" onclick="changeAction(this)">draw</button>
    <button id="spray" type="button" onclick="changeAction(this)">spray</button>
    <button type="button" onclick="downloadImage()">to Image</button>
    <button type="button" onclick="downloadSVG()">toSVG</button>
</div>
<div>
    <div>
        <label for="a">
            background image <code>erasable</code>
        </label>
        <input id="a" type="checkbox" onchange="setBgImageErasableProp(this)">
    </div>
    <div>
        <label for="b">
            remove erased objects on <code>erasing:end</code>
        </label>
        <input id="b" type="checkbox" onchange="setErasingRemovesErasedObjects(this)">
    </div>
</div>
<div>
 
</div>
<div style="display:flex;flex-direction:row;">
    <div onmousedown='tzdragg.startMoving(event);' onmouseup='tzdragg.stopMoving();'>
        <canvas id="c" width="500" height="620"></canvas>
    </div>
    <div style="margin:0 1rem;">
        <code>erasing:end</code><br>
        <code id="output">N/A</code>
    </div>
</div>

@section Scripts{
 
    <script src="~/js/fabric.js"></script>
    <script type="text/javascript">
     
            let erasingRemovesErasedObjects = false;
            function changeAction(target) {
                ['select', 'erase', 'undo', 'draw', 'spray'].forEach(action => {
                    const t = document.getElementById(action);
                    t.classList.remove('active');
                });
                if (typeof target === 'string') target = document.getElementById(target);
                target.classList.add('active');
                switch (target.id) {
                    case "select":
                        canvas.isDrawingMode = false;
                        break;
                    case "erase":
                        canvas.freeDrawingBrush = new fabric.EraserBrush(canvas);
                        canvas.freeDrawingBrush.width = 10;
                        canvas.isDrawingMode = true;
                        break;
                    case "undo":
                        canvas.freeDrawingBrush = new fabric.EraserBrush(canvas);
                        canvas.freeDrawingBrush.width = 10;
                        canvas.freeDrawingBrush.inverted = true;
                        canvas.isDrawingMode = true;
                        break;
                    case "draw":
                        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
                        canvas.freeDrawingBrush.width = 35;
                        canvas.isDrawingMode = true;
                        break;
                    case "spray":
                        canvas.freeDrawingBrush = new fabric.SprayBrush(canvas);
                        canvas.freeDrawingBrush.width = 35;
                        canvas.isDrawingMode = true;
                        break;
                    default:
                        break;
                }
            }
            function init() {
                const t = new fabric.Triangle({
                    top: 300,
                    left: 210,
                    width: 100,
                    height: 100,
                    fill: "blue",
                    erasable: false
                });

                // canvas.add(
                //     new fabric.Rect({
                //         top: 50,
                //         left: 100,
                //         width: 50,
                //         height: 50,
                //         fill: "#f55",
                //         opacity: 0.8
                //     }),
                //     new fabric.Rect({
                //         top: 50,
                //         left: 150,
                //         width: 50,
                //         height: 50,
                //         fill: "#f55",
                //         opacity: 0.8
                //     }),
                //     new fabric.Group([
                //         t,
                //         new fabric.Circle({ top: 140, left: 230, radius: 75, fill: "green" })
                //     ], { erasable: 'deep' })
                // );
        @* var url = "data:image/png;base64,@Convert.ToBase64String(FileBytes)";*@
                    fabric.Image.fromURL("@ViewBag.BaseUrl/dist/fenny.jpg",
                        function (img) {
                             img.set("erasable", true);
                          
                     
                            // img.set({ opacity: 0.7 });
                            // function animate() {
                            //     img.animate("opacity", img.get("opacity") === 0.7 ? 0.4 : 0.7, {
                            //         duration: 1000,
                            //         onChange: canvas.renderAll.bind(canvas),
                            //         onComplete: animate
                            //     });
                            // }
                            // animate();
                       
                            img.set({ erasable: true });
                            canvas.add(img);
                            canvas.on("erasing:end", ({ targets, drawables }) => {
                                // var output = document.getElementById("output");
                                // output.innerHTML = JSON.stringify({
                                //     objects: targets.map((t) => t.type),
                                //     drawables: Object.keys(drawables)
                                // }, null, '\t');
                                if (erasingRemovesErasedObjects) {
                                    targets.forEach(obj => obj.group?.removeWithUpdate(obj) || canvas.remove(obj));
                                }
                            })
                            canvas.renderAll();
                        },
                        { crossOrigin: "anonymous" }
                    );

                // function animate() {
                //     try {
                //         canvas
                //             .item(0)
                //             .animate("top", canvas.item(0).get("top") === 500 ? "100" : "500", {
                //                 duration: 1000,
                //                 onChange: canvas.renderAll.bind(canvas),
                //                 onComplete: animate
                //             });
                //     } catch (error) {
                //         setTimeout(animate, 500);
                //     }
                // }
                // animate();
            }

            const setDrawableErasableProp = (drawable, value) => {
                canvas.get(drawable)?.set({ erasable: value });
                changeAction('erase');
            };

            const setBgImageErasableProp = (input) =>
                setDrawableErasableProp("backgroundImage", input.checked);

            const setErasingRemovesErasedObjects = (input) =>
                (erasingRemovesErasedObjects = input.checked);

            const downloadImage = () => {
                const ext = "png";
                const base64 = canvas.toDataURL({
                    format: ext,
                    enableRetinaScaling: true
                });
                const link = document.createElement("a");
                link.href = base64;
                link.download = `eraser_example.${ext}`;
                link.click();
            };

            const downloadSVG = () => {
                const svg = canvas.toSVG();
                const a = document.createElement("a");
                const blob = new Blob([svg], { type: "image/svg+xml" });
                const blobURL = URL.createObjectURL(blob);
                a.href = blobURL;
                a.download = "eraser_example.svg";
                a.click();
                URL.revokeObjectURL(blobURL);
            };

            const toJSON = async () => {
                const json = canvas.toDatalessJSON(["clipPath", "eraser"]);
                const out = JSON.stringify(json, null, "\t");
                const blob = new Blob([out], { type: "text/plain" });
                const clipboardItemData = { [blob.type]: blob };
                try {
                    navigator.clipboard &&
                        (await navigator.clipboard.write([
                            new ClipboardItem(clipboardItemData)
                        ]));
                } catch (error) {
                    console.log(error);
                }
                const blobURL = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = blobURL;
                a.download = "eraser_example.json";
                a.click();
                URL.revokeObjectURL(blobURL);
            };
            const canvas = this.__canvas = new fabric.Canvas('c');
            init();
            changeAction('erase');



        var tzdragg = function () {
            return {
                move: function (divid, xpos, ypos) {
                    console.log('1');
                    var a = $(divid);
                    $(divid).style.left = xpos + 'px';
                    $(divid).style.top = ypos + 'px';
                },
                startMoving: function (evt) {

                    evt = evt || window.event;
                    var posX = evt.clientX,
                        posY = evt.clientY,
                        a = $('elem'),
                        divTop = a.style.top,
                        divLeft = a.style.left;

                    divTop = divTop.replace('px', '');
                    divLeft = divLeft.replace('px', '');
                    var diffX = posX - divLeft,
                        diffY = posY - divTop;
                    document.onmousemove = function (evt) {
                        evt = evt || window.event;
                        var posX = evt.clientX,
                            posY = evt.clientY,
                            aX = posX - diffX,
                            aY = posY - diffY;
                        var boun = document.getElementById("parent").offsetWidth - document.getElementById("elem").offsetWidth;

                        if ((aX > 0) && (aX < boun) && (aY > 0) && (aY < boun))
                            tzdragg.move('elem', aX, aY);
                    }
                },
                stopMoving: function () {
                    var a = document.createElement('script');
                    document.onmousemove = function () { }
                },
            }
        }();

    </script>

   
}